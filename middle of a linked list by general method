/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    // function for getting length of linked list
int length_linked_list(ListNode* head){
    cout<<"printing the length of entire linked list:"<<endl;
    int count=0;
    ListNode* temp=head;
    if(head==NULL){
        cout<<"list is empty"<<endl;
        return 0;
    }
    while(temp!=NULL){
        count++;
        temp=temp->next;
    }
    return count;
}

    ListNode* middleNode(ListNode* head) {
        int length=length_linked_list(head);
        int position=(length/2)+1;
        ListNode* temp=head;
        int curr_position=1;
        while(curr_position!=position){
            temp=temp->next;
            curr_position++;
        }
        return temp;
    }
};
